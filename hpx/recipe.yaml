schema_version: 1

context:
  version: 0.0.0

package:
  name: hpx
  version: ${{ version }}

source:
  git: https://github.com/STEllAR-GROUP/hpx.git


build:
  number: 0

requirements:
  build:
    # Section for the native build platform. Think "build-tools", that run on the native platform,
    # but output results for the target platform.
    # Dependencies required during the build phase not needed on the host.
    - ${{ compiler('cxx') }}
    # - ${{ stdlib("c") }}
    - cmake
    - if: win
      then: git
    - if: not win
      then: ninja
  host:
    # Section for the target platform. Might not be the same as the build platform!
    # Dependencies required during build phase needed on the host.
    - asio
    - libboost-devel #####################################################
    - if: not osx
      then: libboost-headers
    # osx actually needs boost's CMake metadata _and_ libs
    - if: osx
      then: libboost-devel
    - if: not win
      then: gperftools
    - libhwloc
    - if: win
      then: mimalloc
  run:
    # Dependencies required for using the software.
    # Stuff required when building software that depends on HPX.
    - asio
    - if: not win
      then: gperftools
    - if: win
      then: mimalloc
  run_exports:
    - ${{ pin_subpackage('hpx', upper_bound='x.x') }}

tests:
  - script: run_test
    # additional requirements at test time
    requirements:
      run:
        - ${{ compiler('cxx') }}
        - cmake
        - if: not win
          then: ninja
        - libboost-devel
    # extra files to be copied to the test folder from the recipe or source directory
    files:
      recipe:
        - test/CMakeLists.txt
        - test/hello_hpx.cpp




about:
  summary: The C++ Standard Library for Parallelism and Concurrency
  description: |
    HPX is a C++ Standard Library for Concurrency and Parallelism. It implements all of the
    corresponding facilities as defined by the C++ Standard. Additionally, in HPX we implement
    functionalities proposed as part of the ongoing C++ standardization process. We also extend
    the C++ Standard APIs to the distributed case.
  license: BSL-1.0
  license_file: LICENSE_1_0.txt
  homepage: https://github.com/STEllAR-GROUP/hpx
  repository: https://github.com/STEllAR-GROUP/hpx
  documentation: https://hpx.stellar-group.org/documentation

extra:
  recipe-maintainers:
    - kordejong
    - oliverschmitz
    - hkaiser
